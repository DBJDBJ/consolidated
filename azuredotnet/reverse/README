/*
 * MIT (c) 2010 by DBJ.ORG
 */
File Reversing Tehniques R&D
From trivial , over normal text file reversal, to handling XXL files on any kind

$Revision: 3 $
$Author: Admin $

Rationale : Have your own file protection tehnique. These days everybody 
            stores files online, withought giving it much thought.
            Instead of complicated file encryprion tools and procedures
            why not just reverse it? Good enough for 99% of situations.
            Added benefit is that you do not need any particular OS or tool.
            Just your reversal exe you developed by forking this C# project.
            
            NOTE: there is no UI here. This is not complete app. Here we 
            have "just" core algorythms for the task of file reversal.
            This an MSTest project built with Visual Studio 2008 and .NET 2.0

==========================================================================
NOTES
==========================================================================

-- Code is extensively commented. Please always read the comments.

-- "Legacy friendly" principle I followed here.
   This means: Using .NET 2.0
   This means no LINQ, etc ...
   Also! I have taken care of so called "legacy" streams. Stream implemenetations 
   where Postion and Length properties are not implemented. 
   So some "minimal" Windows CE or .NET or SilverLight stream implementation will be handled. 
      
-- Unit Testing
   Please use RAM DISK to achieve complete decoupling from file system while testing
   There are few free implementations available 
   Free example:
   http://memory.dataram.com/products-and-services/software/ramdisk/download-ramdisk
   Appears to be the fastest, stable and working on all WIN32 and WIN64 OS-es.
   
-- Usability   

   There are two groups "solutions" inside. One works in RAM and the other on the disk.
   
   ReverseText(Func<System.IO.TextReader> input, Func<System.IO.TextWriter> output)

   In the heart of the "simple" solution is above call. Algorithm simply reverses 
   the whole input as one string and the writes it in one go to the output.
   This is working, and is directly dependant on the RAM available.
   For very large files this solution will still work but with a *lot* of paging.
   
   Second solution:
   
    dbj.Reverser.reverse(input, output); // arguments: file paths 
    
   Above solution reverses the stream in place, that is : byte by byte. Obviously with lot of seek-ing. 
   This solution does NOT rely on RAM or virtual RAM.   
   This woill work on file size > 1 GB. Slow but sure approach. 
   Extensive non trivial testing is requied.   


-- Iteration 0 : Test early (and often ;o)
   Thus dbj.Reverser had (a small?) problem arround RO files reversing.
   ReverseText() works ok. Should be tested on very large files.
   RAM disk should be setup for future testing.
   As usual testing inside Virtual PC could be the best testing strategy.
   
   
-- Next Iteration --> Improved architecture 

   Three key abstractions
   1. file reader  
   2. stack (LIFO structure)
   3. reverser and writer 

   Reader reads text file and push-es ti to stack. 
   When EOF is reached it signals to the writer (ManualResetEvent?)
   
   Writer/Reverser pops each line from a stack, reverses it and writes it to the output
   
   In this architecture reader and reverser/writer may be comprehensively decoupled, in separate threads. 
   An queue (FIFO) can be placed between reader and writer/reverser.
   Writer reverser uses stack internaly.
   
-------------------------------------------------------------------------------

MIT (c) 2010 by http://DBJ.ORG
