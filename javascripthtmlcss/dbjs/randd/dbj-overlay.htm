<!DOCTYPE html >
<html>
<!-- http://flowplayer.org/tools/demos/ -->
<head>
<!-- meta http-equiv="X-UA-Compatible" content="IE=8" / -->
<meta content="text/html; charset=utf-8" http-equiv="content-type" />
<title>DBJ*Moment</title>
<link href="http://dbj.org/4/blueprint/screen.css" rel="stylesheet" type="text/css" media="screen" />
<link href="http://dbj.org/4/blueprint/prettify.css" rel="stylesheet" type="text/css" media="screen,projection" />
<script src="http://dbj.org/4/blueprint/prettify.js" type="text/javascript"></script>
<link rel="stylesheet" type="text/css" href="dbj-overlay.css"/>
<!--[if IE] --->
<link href="http://dbj.org/4/fblight/fbl.css" rel="stylesheet" type="text/css" />
<script src="http://dbj.org/4/fblight/fbl.js" type="text/javascript"></script>
<!--- [endif]-->
<script type="text/javascript" >
    if (window.firebug) {
        firebug.env.debug = false;    // open minimized
        firebug.env.detectFirebug;  // do not initialize if Firebug is active
    }
if ( ! window.JSON ) {
 document.write('<s'+'cript src=\'http://dbj.org/4/json2.js\' type=\'text/javascript\' ></'+'script>') ;
 }
 </script>
<style type="text/css" media="screen" >
/* some styling for triggers */
#triggers { text-align:center; }
#triggers img { cursor:pointer; margin:0 5px;   background-color:#fff;  border:1px solid #ccc;
                padding:2px;
                -moz-border-radius:4px; 
                -webkit-border-radius:4px;
}
</style>
</head>
<body>
<div id="container">
<!-- trigger elements -->
<div id="triggers">
<img src="http://farm4.static.flickr.com/3651/3445879840_7ca4b491e9_m.jpg" rel="#mies1" class="dbj_rounded" alt="whatever ..." />
<img src="http://farm4.static.flickr.com/3346/3449388113_71a06b8548_m.jpg" rel="#mies1" alt="wherever ..."/>
</div>
<!-- overlays -->
<div class="dbj_overlay dbj_rounded" id="mies1">
<!--- img src="http://farm4.static.flickr.com/3651/3445879840_7ca4b491e9.jpg" / --->
<div class="details">
<h3>DBJ*Moment&trade;</h3>
<pre  lang="javascript" class="prettyprint" >
    // DBJ*Moment(tm) usage
    // object implementation
    (function() {
        // it is a requirement *not* to have anything global
        var dictionary = {
            "set": function(k, v) { return this["" + k] = v; },
            "get": function(k) { return this["" + k]; }
        };
        // "name" is mandatory keyval
        Moment.remember('{ "name" : "dictionary"}', dictionary);
    })();
    //
    this.onload = function() {

        // "name" is mandatory keyval
        var dict = Moment.recreate('{"name":"dictionary"}');

        // dict is a "moment" and thus has only one function
        // "name" is mandatory keyval, it is a name of function or property
        // other keyval's are optional. they can be arguments
        dict.answer('{"name":"set", "arg" : ["person","Bill"] }')
        dict.answer('{"name":"get", "arg" : ["person"] }', function(data) { result.innerHTML="<"+"h4>"+data+"<"+"/h4>"; })
    }
</pre>
<h4>Usage example</h4>
<div id="result"></div>
</div>
</div>
</div>
</body>
<script type="text/javascript">
    function Moment( name, implementation) {
        var name_ = name, imp_ = implementation;
        // note that Moment can use only public methods and properties
        // on its implementation object
        // also note that only Moment instance knows about object acting
        // as the implementation behind it.
        this.answer = function(json_string, callback) {
            var tid = window.setTimeout(
          function() {
              window.clearTimeout(tid); delete tid;
              var opt = JSON.parse(json_string)
            , fun = imp_[opt.name]
            , arg = opt.arg || [];
              callback = callback || function() { /*no-op*/ };
              try {
                  if ("function" === typeof fun )
                      callback(fun.apply(imp_,arg));
                  else
                      callback(fun);
              } catch (x) {
                  callback('{"error" : "' + x.message + '" }');
              }
          }
          , Moment.timeout
         )
        }
    }
    Moment.timeout = 100; // uSec's
    Moment.registry = [];
    Moment.recreate = function(json_string) {
        var opt = JSON.parse(json_string);
        return Moment.registry[opt.name];
    };
    Moment.remember = function(json_string, object) {
        var opt = JSON.parse(json_string);
        Moment.registry[opt.name] = new Moment(opt.name, object);
    };

    // usage
    // object implementation
    (function() {
        // it is a requirement *not* to have anything global
        var dictionary = {
            "set": function(k, v) { return this["" + k] = v; },
            "get": function(k) { return this["" + k]; }
        };
        // "name" is mandatory keyval
        Moment.remember('{ "name" : "dictionary"}', dictionary);
    })();
    //
    this.onload = function() {

        // "name" is mandatory keyval
        var dict = Moment.recreate('{"name":"dictionary"}');

        // dict is a "moment" and thus has only one function
        // "name" is mandatory keyval, it is a name of function or property
        // other keyval's are optional. they can be arguments
        dict.answer('{"name":"set", "arg" : ["person","Bill"] }')
        dict.answer('{"name":"get", "arg" : ["person"] }',
        function(data) {
            _console.group("Moment");
            _console.log("person: " + data);
            _console.groupEnd();
            result.innerHTML = "<h4>" + data + "</h4>";
        })
    }
</script>
<script type="text/javascript" >

    (function(glob, undefined) {
        _console = {
            warn: glob.console && console.warn ? function() { console.warn.apply(console, arguments); } : function() { },
            group: glob.console && console.group ? function() { console.group.apply(console, arguments); } : function() { },
            groupEnd: glob.console && console.groupEnd ? function() { console.groupEnd(); } : function() { },
            groupCollapsed: glob.console && console.groupCollapsed ? function() { console.groupCollapsed.apply(console, arguments); } : function() { },
            log: glob.console && console.log ? function() { console.log.apply(console, arguments); } : function() { }
        };
    })(window);

</script>
<!-- default set of jQuery Tools + jQuery 1.3.2 -->
<script src="http://cdn.jquerytools.org/1.1.2/jquery.tools.min.js" type="text/javascript"></script>
<script type="text/javascript" >
    $(document).ready(function() {
        $("img[rel]").overlay({ "expose": "#ccc" });
    });
</script>
</html>
