<!DOCTYPE html>
<html>
<head>
<script class="jsbin" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script>
<meta charset=utf-8 />
<title>JS Bin</title>
<style>
  html,body { font:14px/1.1 monospace; }
  #log {width:50%; height:400px; border:1px solid #ccc; font-size:85%; padding:5px; background:#EEE; overflow:auto; margin:15px 0; float:right;}
  hr {border:0; border-top:1px dotted #ccc; margin:3px 0; color:#fff;}
  #texttotrim { width:600px; height:200px; float:left; }
  input { width:200px; margin:2px; }
  table { background-color: #CCCCCC; }
</style>
</head>
<body>
  <textarea id="texttotrim">&#0010;&#x00A0;     &#0010;Lorem&#x00A0; ipsum dolor sit amet, consectetur adipiscing elit. Nullam ultricies fermentum lectus, at tincidunt sapien fermentum a. Mauris cursus, felis quis mollis vestibulum, massa purus consequat quam, ut euismod augue nunc id magna. Aliquam bibendum sapien eget leo consequat condimentum.&#0010; &#x00A0;   
  
  
&#x00A0;&#0010;</textarea>
  <span style="float:left;">
  <label for="looplen">Loop :</label> <input type="text" size="4" id="times" value="50000" /> <label for="times">times</label>.
  <input id="trimbutton" type="button" value="trim test" onclick="trimTest();" />
  </span>
  <div id="log"></div>
</body>
<script type="text/javascript">
// current jQuery trim()
var rtrim = /^(\s|\u00A0)+|(\s|\u00A0)+$/g;
var jqtrim = function( text ) {
    return (text || "").replace( rtrim, "" );
  };

// alleged improvement
var thtrim = function( text ) {
    if ( typeof String.trim === "function" ) {
      return ( text || "" ).trim();
    }
    var  str = ( text || "" ).replace( /^\s\s*/, '' ),
      ws = /\s/,
      i = str.length;
    while ( ws.test( str.charAt( --i ) ) );
    return str.slice( 0, i + 1 );
  };


// simple improvement
var thtrim2 = function( text ) {
    if ( typeof String.trim === "function" ) {
      return ( text || "" ).trim();
    }
    return (text || "").replace( /^\s\s*/, "" ).replace( /\s\s*$/, "" );
  };
/////////////////////////////////////////////////////////////////////////////////////////
//dbjtrim
var dbjtrim = typeof "".trim === "function" ? function( text ) {
            return ! text ? "" : text.trim();
        }
: function ( text ) {
        return ! text ? "" : text.replace( rtrim , "" );
    };

(function () {

  var rx1,rx2 ;
if ( /MSIE/.test(window.navigator.userAgent)  )
{
  rx1 = /^[\s\xA0]+/ ; rx2 = /[\s\xA0]/ ;
} else {
  rx1 = /^\s+/ ; rx2 = /\s/ ;
}
  
window.dbjtrim2 = typeof "".trim === "function" ? 
function( text ) { return ! text ? "" : text.trim(); } 
: function (str) {
// http://blog.stevenlevithan.com/archives/faster-trim-javascript
  var  str = str.replace( rx1 , ''),
    ws = rx2, i = str.length;
  while (ws.test(str.charAt(--i)));
  return str.slice(0, i + 1); 
}
})();
//////////////////////////////////////////////////////////////////////////////////////////
var thtrim3 = typeof "".trim === "function" ? function( text ) {
            return ! text ? "" : text.trim();
        }
: function ( text ) {
        return ! text ? "" : text.replace( /^\s\s*/, "" ).replace( /\s\s*$/, "" );
    };

var rtrimleft = /^\s\s*/;
var rtrimright = /\s\s*$/;
var thtrim4 = typeof "".trim === "function" ? function( text ) {
            return ! text ? "" : text.trim();
        }
: function ( text ) {
        return ! text ? "" : text.replace( rtrimleft, "" ).replace( rtrimright, "" );
    };

var rtrimleft2 = /^[\s\xA0]+/;
var rtrimright2 = /[\s\xA0]+$/;
var thtrim5 = typeof "".trim === "function" ? function( text ) {
            return ! text ? "" : text.trim();
        }
: function ( text ) {
        return ! text ? "" : text.replace( rtrimleft2, "" ).replace( rtrimright2, "" );
    };

var rtrimleft3 = /^[\s\xA0][\s\xA0]*/;
var rtrimright3 = /[\s\xA0][\s\xA0]*$/;
var thtrim6 = typeof "".trim === "function" ? function( text ) {
            return ! text ? "" : text.trim();
        }
: function ( text ) {
        return ! text ? "" : text.replace( rtrimleft3, "" ).replace( rtrimright3, "" );
    };

var rtrimleft4 = /^(\s|\xA0)+/;
var rtrimright4 = /(\s|\xA0)+$/;
var thtrim7 = typeof "".trim === "function" ? function( text ) {
            return ! text ? "" : text.trim();
        }
: function ( text ) {
        return ! text ? "" : text.replace( rtrimleft4, "" ).replace( rtrimright4, "" );
    };

var rtrimleft5 = /^(\s|\xA0)(\s|\xA0)*/;
var rtrimright5 = /(\s|\xA0)(\s|\xA0)*$/;
var thtrim8 = typeof "".trim === "function" ? function( text ) {
            return ! text ? "" : text.trim();
        }
: function ( text ) {
        return ! text ? "" : text.replace( rtrimleft5, "" ).replace( rtrimright5, "" );
    };
////////////////////////////////////////////////////////////////////////////////////////
// test methods...
// Test speed and accuracy
    window.trimTest = function() {
        try {
            // Create basic console methods
            var konsole = {
                time: function(name) {
                    konsole._timers[name] = new Date().getTime();
                },
                timeEnd: function(name) {
                    var took = new Date().getTime() - konsole._timers[name];
                    konsole._timers[name] = null;
                    return took;
                },
                log: function(value) {
                    if (this.$tbl && "function" === typeof value.join) {
                        this.$tbl.append("<tr><td>" + value.join("</td><td>") + "</td></tr>");
                    }
                    else this.$log.append("" + value);
                },
                to_bottom: function(s_) {
                    if (s_) this.log(s_);
                    var log = this.$log[0];
                    log.scrollTop = log.scrollHeight; // Scroll to the bottom of the log
                },
                _timers: {},
                $log: $("#log"),
                $tbl: null,
                new_table: function(cap_, hdr_) {
                    this.$tbl = $("<table border='1'></table>");
                    this.$tbl.append("<caption>" + (cap_ ? cap_ : "&nbsp;") + "</caption>");
                    if (hdr_ && hdr_.join) {
                        this.$tbl.append("<tr><th>" + hdr_.join("</th><th>") + "</th></tr>");
                    }
                    this.$log.append(this.$tbl);
                    return this.$tbl;
                }
            };

            var bencher = function(fn, fname) {
                var jqn = bencher.loopsize, result_len, took, text = bencher.text;
                konsole.time(fname);
                while (jqn--) result_len = fn(text).length;
                took = konsole.timeEnd(fname);
                konsole.log([fname, took, result_len]);
            };
            bencher.loopsize = $('#times').val();
            bencher.text = $('#texttotrim').val();

            konsole.log( "<h1>" + (window.trimTest.counter++) + ".</h1>" );

            konsole.new_table('<b>Original string length: ' + bencher.text.length + '</b>',
                    ["Function", "Time (ms)", "Result len"]
                   );
            bencher(jQuery.trim, "jQuery.trim");
            bencher(dbjtrim2, "DBJ trim 2");
            bencher(thtrim5, "DBJ's + travis's trim (fixed regex)");
            bencher(thtrim6, "DBJ's + travis's trim (fixed alt 1)");
            bencher(thtrim7, "DBJ's + travis's trim (fixed alt 2)");
            bencher(thtrim8, "DBJ's + travis's trim (fixed alt 3)");
            konsole.to_bottom("<p><hr/></p>");
        } catch (x) {
            alert("ERROR! " + x.message);
        }
    };
    window.trimTest.counter = 1;
////////////////////////////////////////////////////////////////////////////////////////
</script>
</html>​