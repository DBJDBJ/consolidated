<!DOCTYPE html />
<html>
<!--  Set document compatibility mode to IE8Mode  -->
<meta http-equiv="X-UA-Compatible" content="IE=edge" >
<meta http-equiv="content-type" content="application/xhtml+xml; charset=iso-8859-1" >
<!-- 
==========================================================================

 NAME: Connectivity Monitor

 AUTHOR: DBJ@DBJ.ORG
 DATE  : 1/29/07

 COMMENT: 
 
 "It is the mark of an educated mind to be able to entertain a thought without accepting it." -Aristotle

========================================================================== -->
<head>
<title>Connectivity Monitor</title>

<hta:application
	applicationname="Connectivity Monitor"	
	border="dialog"
	borderstyle="normal"
	caption="Connectivity Monitor"
	contextmenu="no"
	icon="images\icon.ico"
	maximizebutton="yes"
	minimizebutton="yes"
	navigable="yes"
	scroll="no"
	selection="no"
	showintaskbar="yes"
	singleinstance="yes"
	sysmenu="yes"
	version="1.0"
	windowstate="normal"
>
<script type="text/javascript" src="dbj.microlib.js"></script>
<script type="text/javascript" >
var intRefreshRt = 1 * 1000 // Refresh Rate in Milliseconds
// Dictionary object created to store Host/Computer names and the DateTime of 
// the last successful ping
var objDict = {}; // new ActiveXObject("Scripting.Dictionary")
// Define the file that will be used to store the Host/Computer names
var strFileName = "dbj_ping.txt"
// Define variable that will be used to automatically refresh the data
var iTimerID
// Define varants to use when accessing the text file
var ForReading = 1
var ForWriting = 2
var ForAppending = 8

window.onload = function () {
    var objFSO = new ActiveXObject("Scripting.FileSystemObject");
    // Resize the HTA and move
    // window.resizeTo 700, 500
    // window.moveTo screen.width/4, screen.height/4
    // Check for the existence of the file defined above, create if it does not exist
    if (!objFSO.FileExists(strFileName)) {
        objFSO.CreateTextFile(strFileName, true);
    }
    objFSO = null;
    // Call functions
    UpdateDict();
    UpdateTable();
    // var timer to execute the UpdateTable function every second defined in the intRefreshRt variable
    iTimerID = window.setInterval(UpdateTable, intRefreshRt);
}
	
	function UpdateTable(){
// 		On Error Resume Next
		
		var strComputer, strHTML, strStatus;
		// Begin building HTML table
		strHTML = "<table width='100%' border='1'><tr>" +
				  "<th >Remote Host</th>" +
				  "<th >Last Successful Ping</th>" +
				  "<th class='status' >Status</th></tr>";
		// Loop through dictionary to get computer names and datetime of last successful ping
		for (strComputer in objDict) {
			strStatus = GetStatus(strComputer)
			if (strStatus != "red.jpg") {
			    objDict[strComputer] = (new Date()).toLocaleTimeString(); // Update last successful ping for the Host/Computer
			} else {
			    objDict[strComputer] = strStatus + (new Date()).toLocaleTimeString() ;
			}
			strHTML = strHTML + "<tr><td>" + strComputer + "</td>" +
					  "<td>" + objDict[strComputer] + "</td><td class='status'>" +
				  	  "<img src='images/" + strStatus + "' width='20' height='20'></td></tr>" ;
		}
		// Send HTML code generated above to body section
		dbj.$("#dispstatus").innerHTML = strHTML + "</table>" ;
	}
	
	function GetStatus(strComputer) {
		var wmiQuery, objWMIService, objPing, objStatus, intReply = 0;
		// Define WMI query to ping
		wmiQuery = "Select * From Win32_PingStatus Where Address = '" + strComputer + "'";
		
		// Make WMI connection to local machine
		objWMIService = dbj.wmi.service();
		// Execute Query
		debugger;
		for (var i = 1 ; i < 4; i++ ) {
		    objPing = objWMIService.ExecQuery(wmiQuery);
			// Retrieve the status code of each ping request
			if ( objPing.objStatus ) {
				if ( 0 == objPing.objStatus.StatusCode ) {
				    intReply++;
                }
			}
		}
		objPing = objWMIService = null ;
		// Determine the image color depending on the number of pings successfully received
			if ( 0 == intReply )
				return "red.jpg"; 
			if(intReply >= 3)
				return "green.jpg";
			// else
				return "yellow.jpg";
	}
	
	function AddNewHost(){
		var objFile, strComputer;
		// Get host/computer name defined in the text field
		strComputer = dbj.$("#newhost").value;
		// If the host/computer name is empty then do nothing
		if ((null == strComputer) || strComputer == "" || strComputer == " ") return ;
        // Clear the host/computer name text field
		dbj.$("#newhost").value = "";
		// Check to ensure the host/computer name does not already exists
		if (! (strComputer in objDict) ){
			// Open the text file and add the new host/computer
			var objFile = FileObject(ForAppending)
			objFile.WriteLine(strComputer);
			objFile.Close();
			var objFile = null;
			// Call functions to update the information displayed
			UpdateDict();
			UpdateTable();
		}
	}
	
	function UpdateHList(){
		var objFile, arrTemp, strTemp, i
		// Get the host/computer names in the text area and split into an array
		arrTemp = dbj.$("#txtahlist").value.split("\n");
		// Open text file
		var objFile = FileObject(ForWriting);
		// Loop through array, writing to text file if the value is not null or blank
		for (i = 0 ; i < arrTemp.length; i++){
			strTemp = arrTemp(i)
			if (!((null == strTemp) || strTemp == "" || strTemp == " ")){
				objFile.WriteLine(strTemp);
			}
		}
		objFile.Close();
		objFile = null;
		// Clear info from dictionary in case there has been deletions
		objDict = {} ; // .RemoveAll();
		// Refresh all the data displayed by calling the functions
		UpdateDict();
		UpdateTable();
		// Re-state the timer that is cleared in the EditList function
		iTimerID = window.setInterval(UpdateTable, intRefreshRt);
	}
	
	function EditList(){
// 		On Error Resume Next
		
		var objFile, strHTML;
		// Stop the time to prevent the data from refreshing while making changes to the host list
		window.clearInterval(iTimerID);
		// Read the current host/computer names from the text file
		objFile = FileObject(ForReading);
		// Output data from text file to text area to review/modify as needed
		strHTML = "<textarea id='txtahlist' cols='30' rows='10'>" + objFile.ReadAll + "</textarea>" + 
				  "<br /><br /><input type='button' value='Update List' onclick='UpdateHList()'>" + 
				  "&nbsp;&nbsp;<input type='button' value='Cancel' onclick='UpdateTable()'>";
		objFile.Close();
		objFile = null;
		// Write HTML to body of HTA
		dbj.$("#dispstatus").innerHTML = strHTML;
	}
	
		// Open text file using the method specified
	function FileObject(strMethod){
		var objFSO = new ActiveXObject("Scripting.FileSystemObject");
		return objFSO.OpenTextFile(strFileName, strMethod);
	}
	
	function UpdateDict(){
		var objFile, strLine;
		// Open the text file to read its content
		objFile = FileObject(ForReading)
		// Loop through each line adding it to the dictionary
		while ( ! objFile.AtEndOfStream ){
		    strLine = objFile.ReadLine();
			if (! ((null == strLine) || strLine == "" || strLine == " ")){
				if (! ( strLine in objDict)) {
					objDict[strLine] = "" ;
				}
			}
		}
		objFile.Close();
		var objFile = null;
	}
</script>
<style type="text/css" media="all">
    html,body 
    {
        font:12px/1.1 verdana,tahoma,arial;
        background-color:#000;color:#fff;
        overflow:auto;
        }
a:link 
{
    color:#fff ;
	text-decoration:none;
}
a:visited {
    color:#fff ;
	text-decoration:none;
}
a:hover {
	font-weight:bold;
	text-decoration:underline;
}
td {
	font: inherit;
	vertical-align: center;
}
.status {
	text-align:center;
}
</style>
</head>
<body>
<div align="center">
<h3>Server Monitor</h3>
<p>&copy; 2011 by IST MOSS Service Line, using  <a href="http://msdn.microsoft.com/en-us/library/aa394350(v=vs.85).aspx" >Win32_PingStatus</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="" onclick="EditList">Edit Host List</a></p>
<p>
Add Host (by name): <input type="text" id="newhost" onkeypress="if( window.event.keycode === 13) AddNewHost();">&nbsp;&nbsp;
<input type="button" value="Add" onclick="AddNewHost()">
</p>
<div id="dispstatus"></div>
</div>
<p>60 Second Refresh Rate</p>
</body>

</html>